<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\Library\UnityAssemblies\UnityEngine.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="Microsoft.CSharp" #>

<#@ import namespace="UnityEngine" #>
<#@ output extension=".cs" #>

<#
	var wrappedTypes = new Type[]
	{
		typeof(Physics),
        typeof(LayerMask),
        typeof(Time),
        typeof(Debug)
	};
#>
//------------------------------------------------------------------------------
// <auto-generated>
// These Unity wrappers are auto-generated.
// </auto-generated>
//------------------------------------------------------------------------------
#pragma warning disable 1591
using System;
using UnityEngine;

namespace Apex.Services
{
<#
	foreach(var t in wrappedTypes)
	{
        List<string> signatures;
		List<string> callSignatures;

		bool instanceCalls = ReflectMethods(t, out signatures, out callSignatures);

        List<string> ctorSignatures;
		List<string> ctorCallSignatures;

        ReflectConstructors(t, out ctorSignatures, out ctorCallSignatures);

        List<string> propSignatures;
		List<IEnumerable<string>> propCallSignatures;
        List<IEnumerable<string>> propInterfaceSignatures;
        instanceCalls |= ReflectProperties(t, out propSignatures, out propCallSignatures, out propInterfaceSignatures);
#>
    public interface I<#=t.Name#>
    {
<#
        for(int i = 0; i < propSignatures.Count; i++)
        {
#>
        <#=propSignatures[i]#>
        {
<#
            foreach(var gs in propInterfaceSignatures[i])
            {
#>
            <#=gs#>
<#
            }
#>
        }
<#
        }

	foreach(var s in signatures)
	{
#>
	    <#=s#>;

<#
	}
#>
    }

    public sealed class <#=t.Name#>Wrapper : I<#=t.Name#>
    {
<#
    if(instanceCalls && !t.IsAbstract)
    {
#>
        private <#=t.Name#> _actual;
<#
        for(int i = 0; i < ctorSignatures.Count; i++)
        {
#>
	    <#=ctorSignatures[i]#>
        {
            <#=ctorCallSignatures[i]#>;
        }

<#
        }
    }

    for(int i = 0; i < propSignatures.Count; i++)
    {
#>
        public <#=propSignatures[i]#>
        {
<#
            foreach(var gs in propCallSignatures[i])
            {
#>
            <#=gs#>
<#
            }
#>
        }
<#
    }

	for(int i = 0; i < signatures.Count; i++)
	{
#>
	    public <#=signatures[i]#>
        {
            <#=callSignatures[i]#>;
        }

<#
	}
#>
    }
<#
	}
#>
}
<#+
    private static void ReflectConstructors(Type t, out List<string> signatures, out List<string> callSignatures)
    {
        signatures = new List<string>();
        callSignatures = new List<string>();

        var ctors = t.GetConstructors();

        foreach (var c in ctors)
        {
            if(c.IsStatic)
            {
                continue;
            }

            var parameters = c.GetParameters();
            var sig = GetSignature(parameters);
            var callSig = GetCallSignature(parameters);

            signatures.Add(string.Format("public {0}Wrapper({1})", t.Name, sig));
            callSignatures.Add(string.Format("_actual = new {0}({1})", t.Name, callSig));
        }
    }

    private static bool ReflectMethods(Type t, out List<string> signatures, out List<string> callSignatures)
    {
        bool instanceCalls = false;
        signatures = new List<string>();
        callSignatures = new List<string>();

        var methods = t.GetMethods();

        foreach(var m in methods)
        {
            if(m.IsSpecialName || IgnoreMember(m) || IsObsolete(m))
            {
                continue;
            }

            var retType = ResolveTypeName(m.ReturnType, false);
            if(retType == "System.Void" || retType == "Void")
            {
                retType = "void";
            }

            var retPrefix = (m.ReturnType == typeof(void)) ? string.Empty : "return ";
            var parameters = m.GetParameters();
            var sig = GetSignature(parameters);
            var callSig = GetCallSignature(parameters);

            signatures.Add(string.Format("{0} {1}({2})", retType, m.Name, sig));

            if(m.IsStatic)
            {
                callSignatures.Add(string.Format("{0}{1}.{2}({3})", retPrefix, t.Name, m.Name, callSig));
            }
            else
            {
                callSignatures.Add(string.Format("{0}_actual.{1}({2})", retPrefix, m.Name, callSig));
                instanceCalls = true;
            }
        }

        return instanceCalls;
    }

    private static bool ReflectProperties(Type t, out List<string> signatures, out List<IEnumerable<string>> callSignatures, out List<IEnumerable<string>> interfaceSignatures)
    {
        bool instanceCalls = false;
        signatures = new List<string>();
        callSignatures = new List<IEnumerable<string>>();
        interfaceSignatures = new List<IEnumerable<string>>();

        var props = t.GetProperties();

        foreach (var p in props)
        {
            if (IgnoreMember(p) || IsObsolete(p))
            {
                continue;
            }

            var retType = ResolveTypeName(p.PropertyType, false);
            bool isStatic = p.GetGetMethod(true).IsStatic;

            signatures.Add(string.Format("{0} {1}", retType, p.Name));

            List<string> getset = new List<string>();
            callSignatures.Add(getset);

            List<string> getsetInterface = new List<string>();
            interfaceSignatures.Add(getsetInterface);

            if (p.CanRead)
            {
                getsetInterface.Add("get;");

                if (isStatic)
                {
                    getset.Add(string.Format("get {{ return {0}.{1}; }}", t.Name, p.Name));
                }
                else
                {
                    getset.Add(string.Format("get {{ return _actual.{0}; }}", p.Name));
                    instanceCalls = true;
                }
            }

            if (p.CanWrite)
            {
                getsetInterface.Add("set;");

                if (isStatic)
                {
                    getset.Add(string.Format("set {{ {0}.{1} = value; }}", t.Name, p.Name));
                }
                else
                {
                    getset.Add(string.Format("set {{ _actual.{0} = value; }}", p.Name));
                    instanceCalls = true;
                }
            }
        }

        return instanceCalls;
    }

    private static string GetSignature(ParameterInfo[] args)
    {
        if(args.Length == 0)
        {
            return string.Empty;
        }

        StringBuilder b = new StringBuilder();
        b.Append(ResolveTypeName(args[0].ParameterType, args[0].IsOut));
        b.Append(" ");
        b.Append(args[0].Name);

        for(int i = 1; i < args.Length; i++)
        {
            b.Append(", ");
            b.Append(ResolveTypeName(args[i].ParameterType, args[i].IsOut));
            b.Append(" ");
            b.Append(args[i].Name);
        }

        return b.ToString();
    }

    private static string GetCallSignature(ParameterInfo[] args)
    {
        if (args.Length == 0)
        {
            return string.Empty;
        }

        StringBuilder b = new StringBuilder();
        if(args[0].IsOut)
        {
            b.Append("out ");
        }

        b.Append(args[0].Name);

        for (int i = 1; i < args.Length; i++)
        {
            b.Append(", ");
            if(args[i].IsOut)
            {
                b.Append("out ");
            }

            b.Append(args[i].Name);
        }

        return b.ToString();
    }

    private static string ResolveTypeName(Type t, bool isOut)
    {
        string typeName;
        if(t.IsPrimitive || t.IsSpecialName)
        {
            using (var provider = new CSharpCodeProvider())
            {
                var typeRef = new CodeTypeReference(t);
                typeName = provider.GetTypeOutput(typeRef);
            }
        }
        else
        {
            typeName = t.FullName;
        }

        if(isOut)
        {
            return "out " + typeName.TrimEnd('&');
        }

        return typeName;
    }

    private static bool IsObsolete(MemberInfo m)
    {
        return Attribute.GetCustomAttribute(m, typeof(ObsoleteAttribute), true) != null;
    }

    private static bool IgnoreMember(MemberInfo m)
    {
        return m.DeclaringType.Equals(typeof(object)) || m.DeclaringType.Equals(typeof(ValueType));
    }
#>