<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)\Library\UnityAssemblies\UnityEngine.dll" #>
<#@ assembly name="$(SolutionDir)\obj\Debug\Assembly-CSharp.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ output extension=".ttout" #>

<#
    var operators = new string[] {  };

    foreach(var op in operators)
    {
#>/* Copyright © 2014 Apex Software. All rights reserved. */

namespace Apex.AI.Editor.UndoRedo
{
    using System;
    using UnityEngine;

    internal sealed class <#=op#> : AIUIOperation, IUndoRedo
    {
        private IView _target;
        private object _oldValue;
        private object _newValue;

        internal <#=op#>(AIUI ui, object oldValue, object newValue, IView target)
            : base(ui)
        {
            _target = target;
            _oldValue = oldValue;
            _newValue = newValue;
        }

        void IUndoRedo.Do()
        {
            _ui.ReplaceSelector(_target, _newValue, false);
        }

        void IUndoRedo.Undo()
        {
            _ui.ReplaceSelector(_target, _oldValue, false);
        }
    }
}
<#
        SaveOutput(op + ".cs"); 
    }
#>
<#+
    private static string SplitToWords(string s)
    {
        if (string.IsNullOrEmpty(s))
        {
            return s;
        }

        s = s.TrimStart('_');
        var transformer = new StringBuilder();

        transformer.Append(char.ToUpper(s[0]));
        for (int i = 1; i < s.Length; i++)
        {
            if (char.IsUpper(s, i))
            {
                transformer.Append(" ");
            }

            transformer.Append(s[i]);
        }

        return transformer.ToString();
    }

    void SaveOutput(string outputFileName)
    {
        string templateDirectory = System.IO.Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = System.IO.Path.Combine(templateDirectory, outputFileName);
        
        if(System.IO.File.Exists(outputFilePath))
        {
            return;
        }

        System.IO.File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Clear();

        EnvDTE.Project dteProject = __getTemplateProject();

        dteProject.ProjectItems.AddFromFile(outputFilePath);
    }

    EnvDTE.Project __getTemplateProject()
    {
        IServiceProvider hostServiceProvider = (IServiceProvider)Host;
        if (hostServiceProvider == null)
            throw new Exception("Host property returned unexpected value (null)");

        EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new Exception("Unable to retrieve EnvDTE.DTE");

        Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
        if (activeSolutionProjects == null)
            throw new Exception("DTE.ActiveSolutionProjects returned null");

        EnvDTE.Project dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
        if (dteProject == null)
            throw new Exception("DTE.ActiveSolutionProjects[0] returned null");

        return dteProject;
    }
#>